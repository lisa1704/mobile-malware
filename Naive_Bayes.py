import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.naive_bayes import GaussianNB

filename = ("Obfuscated-MalMem2022.csv")
df = pd.read_csv(filename)

#Remove the category value because that tells so much about the label already
df.drop(columns = "Category", axis = 1, inplace=True)

#Check for null values
df.isnull().values.any()

#Use one hot encoder for the label
# Create the encoder:
encoder = LabelEncoder()
# Apply the encoder:
df['Label'] = encoder.fit_transform(df['Class'])
# Remove the original categorical feature
df.drop(columns = 'Class' ,axis=1, inplace=True)

y = df['Label']  #label
X = df.drop(columns = 'Label', axis=1) #features

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.20, random_state = 1234)

best_model =  GaussianNB()
best_model.fit(X_train, y_train)
y_pred = best_model.predict(X_test)

# Compute the confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(cm)

# Compute other metrics
print("Classification Report:")
print(classification_report(y_test, y_pred))

#Result
# # [[5731   61]
#  [  24 5904]]
# Classification Report:
#               precision    recall  f1-score   support

#            0       1.00      0.99      0.99      5792
#            1       0.99      1.00      0.99      5928

#     accuracy                           0.99     11720
#    macro avg       0.99      0.99      0.99     11720
# weighted avg       0.99      0.99      0.99     11720