import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix, classification_report

# preprocess tabular data
filename = "tabular_dataset.xlsx"
df = pd.read_excel(filename)
df.isnull().values.any()

df.drop(columns=['Hash', 'Category'], axis=1, inplace=True)

# Encode categorical labels
encoder = LabelEncoder()
df['Label'] = encoder.fit_transform(df['Family'])
# Remove the original categorical feature
df.drop(columns = 'Family' ,axis=1, inplace=True)
y = df['Label']  #label
X = df.drop(columns = 'Label', axis=1) #features

# training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1234)
# Hyperparameter tuning using GridSearchCV
param_grid = {
    'max_depth': range(1, 50),
    'min_samples_leaf': range(1, 50)
}

grid_search = GridSearchCV(DecisionTreeClassifier(), param_grid, cv=5)
grid_search.fit(X_train, y_train)
best_params = grid_search.best_params_
print("Best Hyperparameters for RF with Highest Accuracy Score:", best_params)
#test predictions
best_model = DecisionTreeClassifier(**best_params)
best_model.fit(X_train, y_train)
y_pred = best_model.predict(X_test)
# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(cm)
print("Classification Report:")
print(classification_report(y_test, y_pred))


# Best Hyperparameters for DT with Highest Accuracy Score: {'max_depth': 31, 'min_samples_leaf': 2}
# Confusion Matrix:
# [[393  15]
#  [ 21 157]]
# Classification Report:
#               precision    recall  f1-score   support

#            0       0.95      0.96      0.96       408
#            1       0.91      0.88      0.90       178

#     accuracy                           0.94       586
#    macro avg       0.93      0.92      0.93       586
# weighted avg       0.94      0.94      0.94       586