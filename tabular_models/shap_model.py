import shap
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression

# Load and preprocess tabular data
filename = "testing.xlsx"
df = pd.read_excel(filename)
df.isnull().values.any()

df.drop(columns=['Hash', 'Category'], axis=1, inplace=True)

# Encode categorical labels
encoder = LabelEncoder()
df['Label'] = encoder.fit_transform(df['Family'])
# Remove the original categorical feature
df.drop(columns = 'Family' ,axis=1, inplace=True)
y = df['Label']  #label
X = df.drop(columns = 'Label', axis=1) #features

scaler = StandardScaler()
X = scaler.fit_transform(X)

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1234)

model = LogisticRegression(C= 1, penalty='l1', solver="liblinear")
model.fit(X_train, y_train)

# Define the masker
masker = shap.maskers.Independent(data=X_train)

# Explain the model's predictions
explainer = shap.LinearExplainer(model, masker)
# shap_values = explainer.shap_values(X_test)
shap_values = explainer(X_test)

# Summary plot
# shap.summary_plot(shap_values, X_test)
shap.plots.bar(shap_values)
