import pandas as pd
import numpy as np
from sklearn import svm
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import confusion_matrix, classification_report

filename = "/kaggle/input/adwarem/testing.xlsx"
df = pd.read_excel(filename)

#Check for null values
df.isnull().values.any()
df.drop(columns=['Hash', 'Category'], axis=1, inplace=True)

# Encode categorical labels
encoder = LabelEncoder()
df['Label'] = encoder.fit_transform(df['Family'])
# Remove the original categorical feature
df.drop(columns = 'Family' ,axis=1, inplace=True)
y = df['Label']  #label
X = df.drop(columns = 'Label', axis=1) #features

scaler = StandardScaler()
X = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.20, random_state = 1234)

param_grid = {
    'C': range(1, 50),
    'gamma': ['scale', 'auto'] + list(np.logspace(-3, 3, 7))

}

grid_search = GridSearchCV(svm.SVC(kernel = 'linear'), param_grid, cv=5)
grid_search.fit(X_train, y_train)

best_params = grid_search.best_params_
print("Best Hyperparameters for with Highest Accuracy Score:", best_params)

best_model =  svm.SVC(kernel='linear', **best_params)
best_model.fit(X_train, y_train)
y_pred = best_model.predict(X_test)

# Compute the confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(cm)

# Compute other metrics
print("Classification Report:")
print(classification_report(y_test, y_pred))


# Best Hyperparameters for with Highest Accuracy Score: {'C': 13, 'gamma': 'scale'}
# Confusion Matrix:
# [[394  14]
#  [ 15 163]]
# Classification Report:
#               precision    recall  f1-score   support

#            0       0.96      0.97      0.96       408
#            1       0.92      0.92      0.92       178

#     accuracy                           0.95       586
#    macro avg       0.94      0.94      0.94       586
# weighted avg       0.95      0.95      0.95       586