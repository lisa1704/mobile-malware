X_train_images_resized = np.array([cv2.resize(image, (128, 128)) for image in X_train_images])
y_train_images = np.array(y_train_images)
sorted_indices = np.argsort(y_train_images)
X_train_images_resized = X_train_images_resized[sorted_indices]
y_train_images = y_train_images[sorted_indices]
y_train = np.array(y_train)
sorted_indices = np.argsort(y_train)
X_train_pca = X_train_pca[sorted_indices]
y_train = y_train[sorted_indices]
num_samples = X_train_images_resized.shape[0]
indices = np.random.choice(X_train_pca.shape[0], size=num_samples, replace=False)
X_train_pca_subset = X_train_pca[indices]
y_train_subset = y_train[indices]
tabular_input = Input(shape=(X_train_pca.shape[1],), name='tabular_input')
tabular_dense = Dense(32, activation='relu')(tabular_input)
image_input = Input(shape=(128, 128, 3), name='image_input')
conv_layer = layers.Conv2D(16, kernel_size=(3, 3), activation='relu')(image_input)
flatten_layer = Flatten()(conv_layer)
concatenated = layers.Concatenate()([tabular_dense, flatten_layer])
common_dense = Dense(64, activation='relu')(concatenated)
output_layer = Dense(1, activation='sigmoid')(common_dense)
model = Model(inputs=[tabular_input, image_input], outputs=output_layer)
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit([X_train_pca_subset, X_train_images_resized], y_train_subset, epochs=10, batch_size=16)
X_test_images_resized = np.array([cv2.resize(image, (128, 128)) for image in test_images])
y_test_images = np.array(test_labels_one_hot)
sorted_indices = np.argsort(test_labels_one_hot)
X_test_images_resized = X_test_images_resized[sorted_indices]
y_test_images = y_test_images[sorted_indices]
y_test = np.array(y_test)
sorted_indices = np.argsort(y_test)
X_test_pca = X_test_pca[sorted_indices]
y_test = y_test[sorted_indices]
num_samples = X_test_images_resized.shape[0]
indices = np.random.choice(X_test_pca.shape[0], size=num_samples, replace=False)
X_test_pca_subset = X_test_pca[indices]
y_test_subset = y_test[indices]
loss, accuracy = model.evaluate([X_test_pca_subset, X_test_images_resized], y_test_subset)
print('Test accuracy:', accuracy)
