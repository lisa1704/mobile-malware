import pandas as pd
import xgboost as xgb
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix, classification_report

filename = ("Obfuscated-MalMem2022.csv")
df = pd.read_csv(filename)

#Remove the category value because that tells so much about the label already
df.drop(columns = "Category", axis = 1, inplace=True)

#Check for null values
df.isnull().values.any()

#Use one hot encoder for the label
# Create the encoder:
encoder = LabelEncoder()
# Apply the encoder:
df['Label'] = encoder.fit_transform(df['Class'])
# Remove the original categorical feature
df.drop(columns = 'Class' ,axis=1, inplace=True)

y = df['Label']  #label
X = df.drop(columns = 'Label', axis=1) #features

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.20, random_state = 1234)

param_grid = {
    'n_estimators': [100, 200, 300]
}

grid_search = GridSearchCV(xgb.XGBClassifier(), param_grid, cv=5)
grid_search.fit(X_train, y_train)

best_params = grid_search.best_params_
print("Best Hyperparameters with Highest Accuracy Score:", best_params)

best_model =  xgb.XGBClassifier(**best_params)
best_model.fit(X_train, y_train)
y_pred = best_model.predict(X_test)

# Compute the confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(cm)

# Compute other metrics
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Best Hyperparameters for with Highest Accuracy Score: {'n_estimators': 100}
# Confusion Matrix:
# [[5792    0]
#  [   0 5928]]
# Classification Report:
#               precision    recall  f1-score   support

#            0       1.00      1.00      1.00      5792
#            1       1.00      1.00      1.00      5928

#     accuracy                           1.00     11720
#    macro avg       1.00      1.00      1.00     11720
# weighted avg       1.00      1.00      1.00     11720

