import shap
import numpy as np
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import VGG16
from tensorflow.keras import layers, models

# Set your paths
train_path = "image_models\\train"
validation_path = "image_models\\val"
test_path = "image_models\\test"

# Data Augmentation for Training Set
datagen = ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)

# Load and Augment Training Data
train_generator = datagen.flow_from_directory(train_path,target_size=(224, 224),batch_size=32,class_mode='binary')

# Load Validation Data
validation_generator = datagen.flow_from_directory(validation_path,target_size=(224, 224),batch_size=32,class_mode='binary')

# Load Test Data
test_generator = datagen.flow_from_directory(test_path,target_size=(224, 224),batch_size=32,class_mode='binary')

base_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
model = models.Sequential()
model.add(base_model)
model.add(layers.Flatten())
model.add(layers.Dense(256, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))

base_model.trainable = False

# Compile the Model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
# Train the Model
model.fit(train_generator, epochs=5, validation_data=validation_generator)

background = train_generator.next()[0]
e = shap.DeepExplainer(model, background)
test_images = test_generator.next()[0][:5]
shap_values = e.shap_values(test_images)
shap.image_plot(shap_values, -test_images)

# Evaluate on Test Data
test_loss, test_acc = model.evaluate(test_generator)
print(f'Test Accuracy: {test_acc * 100:.2f}%')


#SGD-Test Accuracy: 60.62%
#ADAM TEST ACCURACY: 96.63%